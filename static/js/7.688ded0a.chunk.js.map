{"version":3,"sources":["helpers/utils.js","pages/weather/weather.js"],"names":["setBackGround","x","Images2","Images3","Images4","Images5","Images6","Images7","Images8","Weather","useState","loading","setLoading","error","setError","data","setData","history","useHistory","useEffect","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","url","process","axios","method","then","res","catch","e","className","style","backgroundImage","weather","id","src","back","onClick","goBack","main","temp","feels_like","pressure","humidity","wind","speed","deg","description","charAt","toUpperCase","slice","name"],"mappings":"sMAUaA,EAAgB,SAACC,GAC5B,QAAQ,GACN,KAAKA,EAAI,IACP,OAAOC,IACT,KAAKD,EAAI,IACP,OAAOE,IACT,KAAKF,EAAI,IACP,OAAOG,IACT,KAAKH,EAAI,IACP,OAAOI,IACT,KAAKJ,EAAI,IACP,OAAOK,IACT,KAAW,MAANL,EACH,OAAOM,IACT,KAAKN,EAAI,IACP,OAAOO,IACT,QACE,OAAO,I,gBCgDEC,UAnEC,WAAO,IAAD,gBAEpB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAUC,cAEhBC,qBAAU,WACR,IAAIC,EAAKC,EAETC,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDL,EAAMK,EAASC,OAAOC,SACtBN,EAAMI,EAASC,OAAOE,UAEtB,IAAIC,EAAG,8DAA0DT,EAA1D,gBAAqEC,EAArE,kBAbSS,mCAaT,iBAEPC,IAAM,CACJC,OAAQ,MACRH,IAAKA,IAEJI,MAAK,SAACC,GACLlB,EAAQkB,EAAInB,MACZH,GAAW,MAEZuB,OAAM,SAACC,GACNtB,GAAS,GACTF,GAAW,WAGhB,IAMH,OACE,qBACEyB,UAAU,kBACVC,MAAO,CACLC,gBACE,OAASvC,EAAce,EAAKyB,SAAWzB,EAAKyB,QAAQ,GAAGC,IAAM,KAJnE,SAOE,sBAAKJ,UAAU,OAAf,UACE,qBAAKK,IAAKC,IAAMN,UAAU,YAAYO,QAb7B,WACb3B,EAAQ4B,YAaJ,sBAAKR,UAAU,cAAf,UACE,uDAAmBtB,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAM+B,YAAzB,aAAmB,EAAYC,QAC/B,sDAAkBhC,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAM+B,YAAxB,aAAkB,EAAYE,cAC9B,oDAAgBjC,QAAhB,IAAgBA,GAAhB,UAAgBA,EAAM+B,YAAtB,aAAgB,EAAYG,YAC5B,oDAAgBlC,QAAhB,IAAgBA,GAAhB,UAAgBA,EAAM+B,YAAtB,aAAgB,EAAYI,YAC5B,uBACA,sDAAkBnC,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAMoC,YAAxB,aAAkB,EAAYC,SAC9B,uDAAmBrC,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAMoC,YAAzB,aAAmB,EAAYE,UAEjC,sBAAKhB,UAAU,gBAAf,UACGtB,EAAKyB,UACA,OAAJzB,QAAI,IAAJA,GAAA,UAAAA,EAAMyB,QAAQ,UAAd,eAAkBc,YAAYC,OAAO,GAAGC,gBAAxC,OACEzC,QADF,IACEA,GADF,UACEA,EAAMyB,QAAQ,UADhB,aACE,EAAkBc,YAAYG,MAAM,IACvC9C,EAAU,aAAe,GACzBE,IAAUF,EAAU,6BAA+B,MAEtD,qCAAMI,QAAN,IAAMA,OAAN,EAAMA,EAAM2C","file":"static/js/7.688ded0a.chunk.js","sourcesContent":["import {\r\n  Images2,\r\n  Images3,\r\n  Images4,\r\n  Images5,\r\n  Images6,\r\n  Images7,\r\n  Images8,\r\n} from \"../assests/images\";\r\n//To set corresponding background with weather\r\nexport const setBackGround = (x) => {\r\n  switch (true) {\r\n    case x < 300:\r\n      return Images2;\r\n    case x < 400:\r\n      return Images3;\r\n    case x < 600:\r\n      return Images4;\r\n    case x < 700:\r\n      return Images5;\r\n    case x < 800:\r\n      return Images6;\r\n    case x === 800:\r\n      return Images7;\r\n    case x > 800:\r\n      return Images8;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { setBackGround } from \"../../helpers/utils\";\r\nimport \"./styles.css\";\r\nimport { back } from \"../../assests/images\";\r\n\r\nconst Weather = () => {\r\n  const WEATHER_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [data, setData] = useState({});\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    let lat, lon;\r\n    // checking if location data is available\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      lat = position.coords.latitude;\r\n      lon = position.coords.longitude;\r\n\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_KEY}&units=metric`;\r\n      // calling weather api\r\n      axios({\r\n        method: \"GET\",\r\n        url: url,\r\n      })\r\n        .then((res) => {\r\n          setData(res.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((e) => {\r\n          setError(true);\r\n          setLoading(false);\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  const toBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"body-background\"\r\n      style={{\r\n        backgroundImage:\r\n          \"url(\" + setBackGround(data.weather && data.weather[0].id) + \")\",\r\n      }}\r\n    >\r\n      <div className=\"mask\">\r\n        <img src={back} className=\"icon-back\" onClick={toBack} />\r\n        <div className=\"temperature\">\r\n          <div>Temperature: {data?.main?.temp}</div>\r\n          <div>Feels Like: {data?.main?.feels_like}</div>\r\n          <div>Pressure: {data?.main?.pressure}</div>\r\n          <div>Humidity: {data?.main?.humidity}</div>\r\n          <br />\r\n          <div>Wind Speed: {data?.wind?.speed}</div>\r\n          <div>Wind Degree: {data?.wind?.deg}</div>\r\n        </div>\r\n        <div className=\"weather-title\">\r\n          {data.weather &&\r\n            data?.weather[0]?.description.charAt(0).toUpperCase() +\r\n              data?.weather[0]?.description.slice(1)}\r\n          {loading ? \"Loading...\" : \"\"}\r\n          {error && !loading ? \"Sorry, Service Unavailable\" : \"\"}\r\n        </div>\r\n        <div>{data?.name}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"sourceRoot":""}